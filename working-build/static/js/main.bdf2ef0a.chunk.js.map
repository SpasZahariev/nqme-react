{"version":3,"sources":["assets/images/space.mp4","components/common/background/spaceBackground.tsx","components/common/errorPage/error.tsx","apiConnection/mutations.ts","apiConnection/queries.ts","redux/actions/actionTypes.ts","redux/actions/apiStatusActions.ts","redux/actions/usernameActions.ts","redux/actions/roomActions.ts","components/common/objectTypes/song.ts","components/landingPage/landingPage.tsx","apiConnection/searchSongs.ts","components/common/nqmeNavBar/nqmeNavBar.tsx","redux/actions/searchActions.ts","components/common/searchResultsContainer/searchResultsContainer.tsx","components/common/utlilityFunctions/usernameToHex.ts","components/common/songQueueContainer/songQueueContainer.tsx","components/common/userListPresenter/userListPresenter.tsx","components/common/utlilityFunctions/extractVideoId.ts","components/common/utlilityFunctions/jsonToPlayList.ts","components/masterPage/masterPage.tsx","components/slavePage/slavePage.tsx","App.tsx","redux/reducers/initialState.ts","redux/reducers/index.ts","redux/reducers/pinReducer.ts","redux/reducers/usernameReducer.ts","redux/reducers/songReducer.ts","redux/reducers/sessionNameReducer.ts","redux/reducers/searchResultsReducer.ts","redux/reducers/apiStatusReducer.ts","index.tsx","redux/configureStore.ts"],"names":["module","exports","__webpack_require__","p","SpaceBackground","react_default","a","createElement","className","preload","loop","autoPlay","muted","src","require","type","Error","PUT_ROOM","gql","_templateObject","PUT_SONG","_templateObject2","LIKE_SONG","_templateObject3","DEQUEUE_SONG","_templateObject4","GET_SPECIFIC_ROOM","queries_templateObject","BEGIN_API_CALL","queries_templateObject2","API_CALL_ERROR","LOAD_ROOM_SUCCESS","LOAD_USERNAMES_SUCCESS","SET_SESSION_NAME","SEARCH_SONGS_SUCCESS","ADD_SONG_OPTIMISTIC","CLEAR_SEARCH_RESULTS","LIKE_SONG_OPTIMISTIC","SET_TO_LIVE_PLAYLIST","SET_TO_LIVE_USERNAMES","DEQUEUE_SONG_OPTIMISTIC","beginApiCall","types","apiCallError","setToLiveUsernames","usernames","setSessionName","sessionName","HOST","loadRoomSuccess","room","setToLivePlaylist","songs","addSongToQueue","client","pin","song","dispatch","addSongOptimistic","title","url","username","company","mutate","mutation","apiMutations","variables","likeSong","likeSongOptimistic","dequeueSong","Brand","withApollo","connect","state","isLoading","apiCallsInProgress","ownProps","loadRoom","pinCode","apiStatusActions","query","apiQueries","then","result","console","log","data","usernameActions","length","catch","error","createRoom","putRoom","props","_useState","useState","_useState2","Object","slicedToArray","enableInput","setEnableInput","checkInputValue","evt","currentTarget","value","react_epic_spinners_umd_min","color","size","react_router","to","placeholder","onChange","Fragment","onClick","disabled","YOUTUBE_OPTIONS","maxResults","key","YOUTUBE_API_KEY","_callee","word","entries","regenerator_default","wrap","_context","prev","next","youtubeSearch","results","map","push","link","likes","YOUTUBE","abrupt","stop","mapDispatchToProps","onSearchSong","_x","_searchSongs","apply","this","arguments","searchSongs","err","searchText","setSearchText","href","id","onSubmit","preventDefault","target","react_fontawesome_index_es","icon","faSearch","data-toggle","aria-expanded","faCog","searchResults","roomActions","faYoutube","faSpotify","faMeteor","usernameToHex","hash","i","charCodeAt","colour","toString","substr","style","borderLeftColor","faHeartbeat","UserListPresenter","extractVideoId","idIndex","indexOf","substring","jsonToPlaylist","entry","parseInt","SPOTIFY","socket","youtubeOptions","height","width","playerVars","origin","iv_load_policy","autoplay","modestbranding","fs","useEffect","io","LOCALHOST","emit","on","JSON","parse","searchResultsBlock","searchResultsContainer_searchResultsContainer","songQueueBlock","songQueueContainer_songQueueContainer","userListBlock","userListPresenter_userListPresenter","nqmeNavBar_nqmeNavBar","YouTube","videoId","opts","onReady","event","playVideo","onEnd","window","innerWidth","background_spaceBackground","exact","path","component","LandingPage","masterPage_masterPage","slavePage_slavePage","reducers_initialState","rootReducer","combineReducers","pinState","undefined","initialState","action","usernamesState","songsState","concat","toConsumableArray","objectSpread","sort","songA","songB","slice","sessionNameState","searchResultsState","cache","InMemoryCache","HttpLink","uri","LOCALHOST_GRAPHQL","ApolloClient","store","createStore","composeWithDevTools","applyMiddleware","thunk","reduxImmutableStateInvariant","ReactDOM","render","es","react_common_esm","react_router_dom","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.bdf2ef0a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/space.020f3382.mp4\";","import React from \"react\";\r\nimport \"./spaceBackground.scss\";\r\n\r\nconst SpaceBackground: React.FC = () => {\r\n  return (\r\n    <div className=\"background-pane\">\r\n      <video className=\"video-bg-elem\" preload=\"auto\" loop autoPlay muted>\r\n        <source src={require(\"../../../assets/images/space.mp4\")} type=\"video/mp4\" />\r\n      </video>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpaceBackground;\r\n","import React from \"react\";\r\nimport \"./error.scss\";\r\n\r\nconst Error = () => {\r\n  return (\r\n    <div className=\"error-box\">\r\n      <h1 className=\"display-3\">Error 404</h1>\r\n      <h3 className=\"display-5\">Check your page URL</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Error;\r\n","import gql from \"graphql-tag\";\r\n\r\n// export const LOGIN_USER = gql`\r\n//   mutation login($email: String!) {\r\n//     login(email: $email)\r\n//   }\r\n// `;\r\n\r\nexport const PUT_ROOM = gql`\r\n  mutation {\r\n    putRoom {\r\n      room {\r\n        usernames\r\n        pin\r\n        songs {\r\n          title\r\n          url\r\n          likes\r\n          company\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const PUT_SONG = gql`\r\n  mutation(\r\n    $pin: String!\r\n    $title: String!\r\n    $url: String!\r\n    $username: String!\r\n    $company: String!\r\n  ) {\r\n    putSong(\r\n      pin: $pin\r\n      title: $title\r\n      url: $url\r\n      username: $username\r\n      company: $company\r\n    ) {\r\n      songs {\r\n        url\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LIKE_SONG = gql`\r\n  mutation($pin: String!, $title: String!) {\r\n    likeSong(pin: $pin, title: $title) {\r\n      songs {\r\n        url\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const DEQUEUE_SONG = gql`\r\n  mutation($pin: String!) {\r\n    dequeueSong(pin: $pin) {\r\n      songs {\r\n        url\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import gql from \"graphql-tag\";\r\n\r\n// export const GET_LAUNCHES = gql`\r\n//   query launchList($after: String) {\r\n//     launches(after: $after) {\r\n//       cursor\r\n//       hasMore\r\n//       launches {\r\n//         id\r\n//         isBooked\r\n//         rocket {\r\n//           id\r\n//           name\r\n//         }\r\n//         mission {\r\n//           name\r\n//           missionPatch\r\n//         }\r\n//       }\r\n//     }\r\n//   }\r\n// `;\r\n\r\nexport const GET_SPECIFIC_ROOM = gql`\r\n  query($pinCode: String!) {\r\n    room(pin: $pinCode) {\r\n      pin\r\n      usernames\r\n      songs {\r\n        title\r\n        url\r\n        likes\r\n        username\r\n        company\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_ROOMS = gql`\r\n  query {\r\n    rooms {\r\n      pin\r\n      usernames\r\n      songs {\r\n        title\r\n        url\r\n        likes\r\n        username\r\n        company\r\n      }\r\n    }\r\n  }\r\n`;\r\n","export const BEGIN_API_CALL = \"BEGIN_API_CALL\";\r\nexport const API_CALL_ERROR = \"API_CALL_ERROR\";\r\nexport const LOAD_ROOM_SUCCESS = \"LOAD_ROOM_SUCCESS\";\r\nexport const LOAD_USERNAMES_SUCCESS = \"LOAD_USERNAMES_SUCCESS\";\r\nexport const SET_SESSION_NAME = \"SET_SESSION_NAME\";\r\nexport const SEARCH_SONGS_SUCCESS = \"SEARCH_SONGS_SUCCESS\";\r\nexport const ADD_SONG_OPTIMISTIC = \"ADD_SONG_OPTIMISTIC\";\r\nexport const CLEAR_SEARCH_RESULTS = \"CLEAR_SEARCH_RESULTS\";\r\nexport const LIKE_SONG_OPTIMISTIC = \"LIKE_SONG_OPTIMISTIC\";\r\nexport const SET_TO_LIVE_PLAYLIST = \"SET_TO_LIVE_PLAYLIST\";\r\nexport const SET_TO_LIVE_USERNAMES = \"SET_TO_LIVE_USERNAMES\";\r\nexport const DEQUEUE_SONG_OPTIMISTIC = \"DEQUEUE_SONG_OPTIMISTIC\";\r\n","import * as types from \"./actionTypes\";\r\n\r\nexport function beginApiCall() {\r\n  return { type: types.BEGIN_API_CALL };\r\n}\r\n\r\nexport function apiCallError() {\r\n  return { type: types.API_CALL_ERROR };\r\n}\r\n","import * as types from \"./actionTypes\";\r\n\r\n// not used for now, might not be needed\r\nexport function loadUsernamesSuccess(usernames: string[]) {\r\n  return { type: types.LOAD_USERNAMES_SUCCESS, usernames: usernames };\r\n}\r\nexport function setToLiveUsernames(usernames: string[]) {\r\n  return { type: types.SET_TO_LIVE_USERNAMES, usernames };\r\n}\r\n\r\nexport function setSessionName(sessionName: string) {\r\n  return { type: types.SET_SESSION_NAME, sessionName: sessionName };\r\n}\r\n\r\n//not used for now might not be needed\r\nexport function addUser() {\r\n  return function(dispatch: any) {\r\n    //temps solution\r\n    //making optimistic call that we will get a name fast\r\n    return setSessionName(\"UserX\");\r\n  };\r\n}\r\n","import { Song } from \"components/common/objectTypes/song\";\r\nimport * as apiMutations from \"../../apiConnection/mutations\";\r\nimport * as apiQueries from \"../../apiConnection/queries\";\r\nimport { Room } from \"../../components/common/objectTypes/room\";\r\nimport * as types from \"./actionTypes\";\r\nimport * as apiStatusActions from \"./apiStatusActions\";\r\nimport * as usernameActions from \"./usernameActions\";\r\n\r\n// import gql from \"graphql-tag\";\r\n\r\n// export function createRoomSuccess(room: Room) {\r\n//   return { type: types.CREATE_ROOM_SUCCESS, room: room };\r\n// }\r\n\r\nconst HOST: string = \"Host\";\r\n\r\ninterface QueryResult {\r\n  data: any;\r\n  loading: any;\r\n  error: any;\r\n}\r\n\r\nexport function loadRoomSuccess(room: Room) {\r\n  return { type: types.LOAD_ROOM_SUCCESS, room: room };\r\n}\r\n\r\nexport function addSongOptimistic(song: Song) {\r\n  return { type: types.ADD_SONG_OPTIMISTIC, song: song };\r\n}\r\n\r\nexport function clearSearchResults() {\r\n  return { type: types.CLEAR_SEARCH_RESULTS };\r\n}\r\n\r\nexport function likeSongOptimistic(title: string) {\r\n  return { type: types.LIKE_SONG_OPTIMISTIC, title };\r\n}\r\n\r\nexport function dequeueSongOptimistic() {\r\n  return { type: types.DEQUEUE_SONG_OPTIMISTIC };\r\n}\r\n\r\nexport function setToLivePlaylist(songs: Song[]) {\r\n  return { type: types.SET_TO_LIVE_PLAYLIST, songs };\r\n}\r\n\r\nexport function createRoom(client: any) {\r\n  // do some thunk stuff\r\n  return function(dispatch: any) {\r\n    dispatch(apiStatusActions.beginApiCall());\r\n    dispatch(usernameActions.setSessionName(HOST));\r\n    //start api loading now\r\n    return client\r\n      .mutate({\r\n        mutation: apiMutations.PUT_ROOM\r\n      })\r\n      .then((result: any) => {\r\n        console.log(\"room created\");\r\n        console.log(result);\r\n        dispatch(loadRoomSuccess(result.data.putRoom.room));\r\n      })\r\n      .catch((error: any) => {\r\n        dispatch(apiStatusActions.apiCallError());\r\n        throw error;\r\n      });\r\n  };\r\n}\r\n\r\nexport function loadRoom(client: any, pinCode: string) {\r\n  return function(dispatch: any) {\r\n    // const client = useApolloClient();\r\n\r\n    dispatch(apiStatusActions.beginApiCall());\r\n    // console.log(wrappedPin);\r\n    return client\r\n      .query({\r\n        query: apiQueries.GET_SPECIFIC_ROOM,\r\n        variables: { pinCode }\r\n      })\r\n      .then((result: QueryResult) => {\r\n        //todo remove later\r\n        console.log(\"here is my result\", result);\r\n        console.log(result.data.room);\r\n        const room = result.data.room;\r\n        dispatch(\r\n          usernameActions.setSessionName(\r\n            room.usernames[room.usernames.length - 1]\r\n          )\r\n        );\r\n        dispatch(loadRoomSuccess(room));\r\n      })\r\n      .catch((error: any) => {\r\n        dispatch(apiStatusActions.apiCallError());\r\n        throw error;\r\n      });\r\n  };\r\n}\r\n\r\nexport function addSongToQueue(client: any, pin: string, song: Song) {\r\n  return function(dispatch: any) {\r\n    dispatch(addSongOptimistic(song));\r\n    dispatch(clearSearchResults());\r\n    const { title, url, username, company } = song;\r\n    return client.mutate({\r\n      mutation: apiMutations.PUT_SONG,\r\n      variables: { pin, title, url, username, company }\r\n    });\r\n  };\r\n}\r\n\r\nexport function likeSong(client: any, pin: string, title: string) {\r\n  return function(dispatch: any) {\r\n    dispatch(likeSongOptimistic(title));\r\n    return client.mutate({\r\n      mutation: apiMutations.LIKE_SONG,\r\n      variables: { pin, title }\r\n    });\r\n  };\r\n}\r\n\r\nexport function dequeueSong(client: any, pin: string) {\r\n  return function(dispatch: any) {\r\n    dispatch(dequeueSongOptimistic());\r\n    return client.mutate({\r\n      mutation: apiMutations.DEQUEUE_SONG,\r\n      variables: { pin }\r\n    });\r\n  };\r\n}\r\n\r\n// client\r\n//   .query({\r\n//     query: apiQueries.GET_ROOMS\r\n//   })\r\n//   .then(result => console.log(result));\r\n\r\n// client\r\n//   .query({\r\n//     query: gql`\r\n//       query {\r\n//         room(pin: \"1111\") {\r\n//           pin\r\n//           usernames\r\n//           songs {\r\n//             title\r\n//             url\r\n//             likes\r\n//             company\r\n//           }\r\n//         }\r\n//       }\r\n//     `\r\n//   })\r\n//   .then((result: any) => console.log(result));\r\n\r\n// // const { loading, error, data } = useQuery(apiQueries.GET_SPECIFIC_ROOM, {\r\n// // variables: pin\r\n// // }).then(result => console.log(result));;\r\n\r\n// return dispatch(loadRoomSuccess(stubData.stubCreateRoom));\r\n","// export type Playlist = {\r\n//   songs: Song[];\r\n// };\r\n\r\nexport enum Brand {\r\n  YOUTUBE = \"YOUTUBE\",\r\n  SPOTIFY = \"SPOTIFY\"\r\n}\r\n\r\nexport type Song = {\r\n  title: string;\r\n  url: string;\r\n  likes: number;\r\n  username: string;\r\n  company: Brand.YOUTUBE | Brand.SPOTIFY;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { FlowerSpinner } from \"react-epic-spinners\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport * as roomActions from \"../../redux/actions/roomActions\";\r\nimport \"./landingPage.scss\";\r\nimport { Store } from \"components/common/objectTypes/store\";\r\nimport { withApollo } from \"react-apollo\";\r\n\r\n\r\n\r\ninterface Props {\r\n  pin: string;\r\n  isLoading: boolean;\r\n  loadRoom: (pin: string) => void\r\n  createRoom: () => void\r\n};\r\n\r\nconst LandingPage: React.FC<Props> = (props) => {\r\n  const [enableInput, setEnableInput] = useState<boolean>(false);\r\n\r\n  const displayInputField = () => {\r\n    return enableInput ? (\r\n      <div className=\"input-group-lg room-input col-6 col-md-4 col-lg-3 col-xl-2\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Input 4 digits\"\r\n          onChange={checkInputValue}\r\n        />\r\n        <h2>OR</h2>\r\n      </div>\r\n    ) : (\r\n        <React.Fragment>\r\n          <h1 className=\"display-2\">NQME</h1>\r\n          <h3>Youtube and Spotify Playlist</h3>\r\n        </React.Fragment>\r\n      );\r\n  };\r\n\r\n  //check if 4 sumbols have been inputted yet\r\n  const checkInputValue = (evt: React.FormEvent<HTMLInputElement>) => {\r\n    if (evt.currentTarget.value.length === 4) {\r\n      console.log(\"this is it boizzz!\");\r\n      props.loadRoom(evt.currentTarget.value);\r\n    }\r\n  };\r\n\r\n\r\n  return props.isLoading ? (\r\n    <div>\r\n      <div className=\"darken-background\" />\r\n      <FlowerSpinner color=\"#d1c7d3\" size={220} className=\"center-flower\" />\r\n    </div>\r\n  ) : (\r\n      <div className=\"container-fluid center-div\">\r\n        {/* if pin exists -> redirect to the room page */}\r\n        {props.pin && <Redirect to={\"/room/\" + props.pin} />}\r\n        <div className=\"main-caption\">\r\n          {displayInputField()}\r\n\r\n          <button\r\n            className=\"btn btn-primary btn-lg m-2\"\r\n            onClick={() => props.createRoom()}\r\n          >\r\n            Create Room\r\n          </button>\r\n\r\n          <button\r\n            className=\"btn btn-outline-light btn-lg m-2\"\r\n            type=\"button\"\r\n            disabled={enableInput}\r\n            onClick={() => setEnableInput(true)}\r\n          >\r\n            Join Room\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: Store) => {\r\n  return {\r\n    pin: state.pin,\r\n    isLoading: state.apiCallsInProgress > 0\r\n  }\r\n}\r\n\r\n// const mapDispatchToProps = {\r\n//   loadRoom: roomActions.loadRoom,\r\n//   createRoom: roomActions.createRoom\r\n// }\r\n\r\nconst mapDispatchToProps = (dispatch: any, ownProps: any) => ({\r\n  loadRoom: (pin: string) => dispatch(roomActions.loadRoom(ownProps.client, pin)),\r\n  createRoom: () => dispatch(roomActions.createRoom(ownProps.client))\r\n  // onSearch: variables => dispatch(loadSearchResults(ownProps.client, variables)),\r\n});\r\n\r\nexport default withApollo(connect(mapStateToProps, mapDispatchToProps)(LandingPage));\r\n","import { Song, Brand } from \"../components/common/objectTypes/song\";\r\nimport { YOUTUBE_API_KEY } from \"../config.json\";\r\nimport youtubeSearch from \"youtube-search\";\r\n\r\nconst YOUTUBE_OPTIONS: youtubeSearch.YouTubeSearchOptions = {\r\n  maxResults: 4,\r\n  key: YOUTUBE_API_KEY,\r\n  type: \"video\"\r\n};\r\n\r\nexport default async function searchSongs(word: string) {\r\n  let entries: Song[] = [];\r\n\r\n  // youtubeSearch(word, YOUTUBE_OPTIONS, (err, results) => {\r\n  await youtubeSearch(word, YOUTUBE_OPTIONS)\r\n    .then(data =>\r\n      data.results.map(result =>\r\n        entries.push({\r\n          title: result.title,\r\n          url: result.link,\r\n          likes: 0,\r\n          username: \"\",\r\n          company: Brand.YOUTUBE\r\n        })\r\n      )\r\n    )\r\n    .catch(error => console.log(error));\r\n\r\n  //TODO - append spotify results\r\n  console.log(\"Youtube search came back with stuff\", entries);\r\n  return entries;\r\n  // data.results.map(result =>\r\n  //   entries.push({\r\n  //     title: result.title,\r\n  //     url: result.link,\r\n  //     likes: 0,\r\n  //     username: \"\",\r\n  //     company: Brand.YOUTUBE\r\n  //   }))\r\n  // {\r\n\r\n  //   searchYouTube(\r\n  //     {\r\n  //       key: YOUTUBE_API_KEY,\r\n  //       term: word,\r\n  //       maxResults: 5\r\n  //     },\r\n  //     videos => {\r\n  //       for (var video of videos) {\r\n  //         entries.push({\r\n  //           time: 0,\r\n  //           url: video.id.videoId,\r\n  //           name: video.snippet.title\r\n  //         });\r\n  //       }\r\n\r\n  //       this.setState({ results: entries });\r\n  //     }\r\n  //   );\r\n\r\n  //   if (this.props.cookies.get(\"SpotifySearchToken\")) {\r\n  //     var tracks = await spotifyApi.searchTracks(word, { limit: 6 });\r\n  //     for (var track of tracks.body.tracks.items) {\r\n  //       entries.push({\r\n  //         name: track.artists[0].name + \" - \" + track.name,\r\n  //         url: track.uri,\r\n  //         time: track.duration_ms\r\n  //       });\r\n  //     }\r\n  //   }\r\n}\r\n\r\n/*\r\n0:\r\nid: \"T7K0pZ9tGi4\"\r\nlink: \"https://www.youtube.com/watch?v=T7K0pZ9tGi4\"\r\nkind: \"youtube#video\"\r\npublishedAt: \"2016-12-21T15:00:02.000Z\"\r\nchannelId: \"UCa10nxShhzNrCE1o2ZOPztg\"\r\nchannelTitle: \"Trap Nation\"\r\ntitle: \"Two Feet - Go F*ck Yourself\"\r\ndescription: \"Download Link ↪︎https://soundcloud.com/twofeetmusic/two-feet-go-fuck-yourself Instagram: https://instagram.com/benz Limited Two Feet vinyl now available: ...\"\r\nthumbnails:\r\ndefault: {url: \"https://i.ytimg.com/vi/T7K0pZ9tGi4/default.jpg\", width: 120, height: 90}\r\nmedium: {url: \"https://i.ytimg.com/vi/T7K0pZ9tGi4/mqdefault.jpg\", width: 320, height: 180}\r\nhigh: {url: \"https://i.ytimg.com/vi/T7K0pZ9tGi4/hqdefault.jpg\", width: 480, height: 360}\r\n*/\r\n","import { faCog, faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { ChangeEvent, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"../../../assets/styles/colors.scss\";\r\nimport * as searchActions from \"../../../redux/actions/searchActions\";\r\nimport { Store } from \"../objectTypes/store\";\r\nimport \"./nqmeNavBar.scss\";\r\n\r\ntype Props = {\r\n  sessionName: string;\r\n  onSearchSong: (word: string, sessionName: string) => void;\r\n};\r\n\r\n// type State = {\r\n//   isDropped: boolean;\r\n// };\r\n\r\nconst NqmeNavBar: React.FC<Props> = (props) => {\r\n  // constructor(props: Props) {\r\n  //   super(props);\r\n  //   this.state = { isDropped: false };\r\n  // }\r\n\r\n  const [searchText, setSearchText] = useState('');\r\n\r\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\r\n    // console.log(evt.target.value);\r\n    setSearchText(evt.target.value);\r\n  }\r\n  const handleSubmit = (evt: React.FormEvent) => {\r\n    evt.preventDefault();\r\n    props.onSearchSong(searchText, props.sessionName);\r\n    setSearchText('');\r\n  }\r\n\r\n  // render() {\r\n  return (\r\n    <div className=\"container-fluid nav-container\">\r\n      <div className=\"nqme-row\">\r\n        {/* on navlink click - wipe the global state*/}\r\n        <a href=\"/\" className=\"nqme-nav-link\">\r\n          <h4 id=\"logo-header\">\r\n            <span id=\"text-4-user\">\r\n              {/* prepend with NQME if it is the master page */}\r\n              {props.sessionName === \"Host\" ? <>NQME </> : <></>}\r\n            </span>\r\n            <span>{props.sessionName}</span>\r\n          </h4>\r\n        </a>\r\n        <form className=\"col-10 col-sm-10 col-md-5 col-lg-7\" onSubmit={handleSubmit}>\r\n          <div className=\"input-group\" id=\"search-div\">\r\n\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"search-input\"\r\n              placeholder=\"Search for a Song\"\r\n              value={searchText}\r\n              onChange={handleChange}\r\n            />\r\n            <div className=\"input-group-append\">\r\n              <button\r\n                className=\"btn btn-primary\"\r\n                id=\"button-input\"\r\n                type=\"submit\"\r\n                value=\"Submit\"\r\n              >\r\n                <FontAwesomeIcon icon={faSearch} />\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n        <div>\r\n          <button\r\n            className=\"btn\"\r\n            id=\"cogwheel\"\r\n            data-toggle=\"dropdown-menu\"\r\n            aria-expanded=\"false\"\r\n          // onClick={toggleDropDown}\r\n          // onClick=\r\n          >\r\n            <FontAwesomeIcon icon={faCog} color=\"#d1c7d3\" size=\"lg\" />\r\n\r\n          </button>\r\n\r\n          {/* <div\r\n              className={this.getDropDownClass()}\r\n              aria-labelledby=\"cogwheel\"\r\n              id=\"dropdown-div\"\r\n            > */}\r\n          {/* <div className=\"custom-control custom-checkbox\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  className=\"custom-control-input\"\r\n                  id=\"defaultUnchecked\"\r\n                />\r\n                <label className=\"custom-control-label\">\r\n                  Default unchecked\r\n                </label>\r\n              </div>\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\"custom-control-input dropdown-item\"\r\n                id=\"defaultIndeterminate2\"\r\n                checked\r\n              />\r\n              <a className=\"dropdown-item\" href=\"#\">\r\n                Something else here\r\n              </a> */}\r\n          {/* </div> */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state: Store) => {\r\n  return {\r\n    sessionName: state.sessionName\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  onSearchSong: searchActions.searchForSongs\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NqmeNavBar);\r\n","import searchSongs from \"../../apiConnection/searchSongs\";\r\nimport * as types from \"./actionTypes\";\r\nimport { Song } from \"components/common/objectTypes/song\";\r\nimport { beginApiCall, apiCallError } from \"./apiStatusActions\";\r\n\r\nexport function searchSongsSuccess(songs: Song[]) {\r\n  return { type: types.SEARCH_SONGS_SUCCESS, songs: songs };\r\n}\r\n\r\nexport function searchForSongs(word: string, sessionName: string) {\r\n  return function(dispatch: any) {\r\n    dispatch(beginApiCall());\r\n    return searchSongs(word)\r\n      .then((results: Song[]) => {\r\n        //enrich with the user that has made the search\r\n        results = results.map(song => {\r\n          song.username = sessionName;\r\n          return song;\r\n        });\r\n        dispatch(searchSongsSuccess(results));\r\n      })\r\n      .catch((err: any) => dispatch(apiCallError()));\r\n  };\r\n}\r\n","import { faSpotify, faYoutube } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faMeteor } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport { withApollo } from \"react-apollo\";\r\nimport { connect } from \"react-redux\";\r\nimport * as roomActions from \"../../../redux/actions/roomActions\";\r\nimport { Brand, Song } from \"../objectTypes/song\";\r\nimport { Store } from \"../objectTypes/store\";\r\nimport \"./searchResultsContainer.scss\";\r\n\r\ntype Props = {\r\n  pin: string;\r\n  searchResults: Song[];\r\n  addSongToQueue: (pin: string, song: Song) => void;\r\n  // {\r\n  //   url: string;\r\n  //   title: string;\r\n  //   company: string;\r\n  // }[];\r\n};\r\n\r\nconst SearchResultsContainer: React.FC<Props> = props => {\r\n\r\n  // const [songInfo, setSongInfo] = useState<Song[]>([]);\r\n  // const [textArray, setTextArray] = useState<String[]>([\"one\", \"two\", \"three\"]);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"here are the search results: \", props.searchResults);\r\n  //   setSongInfo([...props.searchResults]);\r\n  //   console.log(\"updated son info: \", songInfo);\r\n  //   console.log(\"updated son info: \", textArray);\r\n\r\n  // }, [props.searchResults])\r\n  //break this up\r\n  //make a useEffect call\r\n  //if no songs display a text area with fun facts library\r\n  return props.searchResults.length === 0 ? (<></>) : (\r\n    <div className=\"search-result-container\">\r\n      <div className=\"search-result-container-header\">\r\n        <span>\r\n          <h3>Search Results</h3>\r\n          {/* <h5>Meteor songs into the queue</h5> */}\r\n        </span>\r\n      </div>\r\n      <div className=\"search-result-table\">\r\n        {props.searchResults.map(song => {\r\n          return (\r\n            <div className=\"search-result-holder\" key={song.url}>\r\n              {song.company === Brand.YOUTUBE ? (<FontAwesomeIcon icon={faYoutube} className=\"corporation-icon\" color=\"#ff0000\" size=\"2x\" />\r\n              ) : (<FontAwesomeIcon icon={faSpotify} className=\"corporation-icon\" color=\"#84bd00\" size=\"2x\" />\r\n                )}\r\n              <div className=\"song-name\">\r\n                <p>\r\n                  {song.title}\r\n                </p>\r\n              </div>\r\n              <button className=\"btn-primary btn-circle\" onClick={() => props.addSongToQueue(props.pin, song)}>\r\n                <FontAwesomeIcon icon={faMeteor} color=\"#d1c7d3\" size=\"2x\" />\r\n              </button>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: Store) => {\r\n  return {\r\n    pin: state.pin,\r\n    searchResults: state.searchResults\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any, ownProps: any) => ({\r\n  addSongToQueue: (pin: string, song: Song) => dispatch(roomActions.addSongToQueue(ownProps.client, pin, song))\r\n});\r\n\r\n// export default withApollo(connect(mapStateToProps, mapDispatchToProps)(LandingPage));\r\nexport default withApollo(connect(mapStateToProps, mapDispatchToProps)(SearchResultsContainer));\r\n","//hash function that transforms strings into hex color values\r\nexport const usernameToHex = (username: string) => {\r\n  console.log(username);\r\n  let hash = 0;\r\n  for (let i = 0; i < username.length; i++) {\r\n    hash = username.charCodeAt(i) + ((hash << 5) - hash);\r\n  }\r\n  let colour = \"#\";\r\n  for (let i = 0; i < 3; i++) {\r\n    let value = (hash >> (i * 8)) & 0xff;\r\n    colour += (\"00\" + value.toString(16)).substr(-2);\r\n  }\r\n  return colour;\r\n};\r\n","import React from \"react\";\r\nimport \"./songQueueContainer.scss\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faHeartbeat } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { connect } from \"react-redux\";\r\nimport { Store } from \"../objectTypes/store\";\r\nimport * as roomActions from \"../../../redux/actions/roomActions\"\r\nimport { withApollo } from \"react-apollo\";\r\nimport { usernameToHex } from \"../utlilityFunctions/usernameToHex\"\r\nimport { Song } from \"../objectTypes/song\";\r\n\r\ntype Props = {\r\n  pin: string;\r\n  songs: Song[];\r\n  likeSong: (pin: string, title: string) => void;\r\n};\r\n\r\nconst SongQueueContainer: React.FC<Props> = props => {\r\n  return (\r\n    <div className=\"queue-container\">\r\n      <div className=\"queue-container-header\">\r\n        <span>\r\n          <h3>Room Code: <span className=\"accented-text\">{props.pin}</span></h3>\r\n          {/* <h5>Meteor songs into the queue</h5> */}\r\n        </span>\r\n      </div>\r\n      <div className=\"queue-table\">\r\n        {props.songs.map(song => {\r\n          return (\r\n            <div className=\"queue-holder\" style={{ borderLeftColor: usernameToHex(song.username) }} key={song.title} >\r\n              <div className=\"song-name\">\r\n                <p>\r\n                  {song.title}\r\n                </p>\r\n              </div>\r\n              <button className=\"btn-primary btn-beat shadow-none\" onClick={() => props.likeSong(props.pin, song.title)}>\r\n                <span className=\"num-likes\">\r\n                  {song.likes}\r\n                </span>\r\n                <FontAwesomeIcon icon={faHeartbeat} color=\"#d1c7d3\" size=\"lg\" />\r\n              </button>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: Store) => {\r\n  return {\r\n    pin: state.pin,\r\n    songs: state.songs\r\n  }\r\n}\r\n\r\n// it is a function that returns functions\r\nconst mapDispatchToProps = (dispatch: any, ownProps: any) => ({\r\n  likeSong: (pin: string, title: string) => dispatch(roomActions.likeSong(ownProps.client, pin, title))\r\n});\r\n\r\n\r\nexport default withApollo(connect(mapStateToProps, mapDispatchToProps)(SongQueueContainer));\r\n","import React from \"react\";\r\nimport \"./userListPresenter.scss\";\r\nimport { usernameToHex } from \"../../common/utlilityFunctions/usernameToHex\"\r\n\r\ntype Props = {\r\n  usernames: string[];\r\n};\r\n\r\nconst UserListPresenter: React.FC<Props> = props => {\r\n  return (\r\n    <div className=\"nickname-container\">\r\n      <div className=\"nickname-header\">\r\n        <h3>Number of Users: <span className=\"accented-text\">{props.usernames.length}</span></h3>\r\n      </div>\r\n      <div className=\"nickname-table\">\r\n        {/* hardcoded first row for just master */}\r\n        {/* <div className=\"name-holder first-field\">Host</div> */}\r\n        {props.usernames.map(username => {\r\n          return (\r\n            <div className=\"name-holder\" style={{ borderLeftColor: usernameToHex(username) }} key={username}>\r\n              {username}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default UserListPresenter;\r\n","export default function extractVideoId(url: string) {\r\n  // https://www.youtube.com/watch?v=ZWq_GMSO4rk\r\n  const idIndex = url.indexOf(\"watch?v=\") + 8;\r\n  return url.substring(idIndex);\r\n}\r\n","import { Song, Brand } from \"../objectTypes/song\";\r\n\r\nexport default function jsonToPlaylist(data: any): Song[] {\r\n  return data.map((entry: any) => {\r\n    return {\r\n      title: entry.title,\r\n      url: entry.url,\r\n      likes: parseInt(entry.likes),\r\n      username: entry.username,\r\n      company: entry.company === \"YOUTUBE\" ? Brand.YOUTUBE : Brand.SPOTIFY\r\n    };\r\n  });\r\n}\r\n","import { Song } from \"components/common/objectTypes/song\";\r\nimport { Store } from \"components/common/objectTypes/store\";\r\nimport React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport YouTube from \"react-youtube\";\r\nimport \"../common/nqmeNavBar/nqmeNavBar\";\r\nimport NqmeNavBar from \"../common/nqmeNavBar/nqmeNavBar\";\r\nimport SearchResultsContainer from \"../common/searchResultsContainer/searchResultsContainer\";\r\nimport SongQueueContainer from \"../common/songQueueContainer/songQueueContainer\";\r\nimport UserListPresenter from \"../common/userListPresenter/userListPresenter\";\r\nimport \"./masterPage.scss\";\r\nimport extractVideoId from \"components/common/utlilityFunctions/extractVideoId\";\r\nimport * as roomActions from \"../../redux/actions/roomActions\";\r\nimport * as usernameActions from \"../../redux/actions/usernameActions\";\r\nimport { withApollo } from \"react-apollo\";\r\nimport io from \"socket.io-client\";\r\nimport { LOCALHOST } from \"../../config.json\"\r\nimport jsonToPlaylist from \"components/common/utlilityFunctions/jsonToPlayList\";\r\n\r\n\r\n\r\ninterface Props {\r\n  pin: string;\r\n  usernames: string[];\r\n  songs: Song[];\r\n  isLoading: boolean;\r\n  dequeueSong: (pin: string) => void;\r\n  setToLivePlaylist: (songs: Song[]) => void;\r\n  setToLiveUsernames: (usernames: string[]) => void;\r\n};\r\n\r\nconst SMALL_SCREEN_WIDTH = 1220;\r\n\r\nconst youtubeOptions = {\r\n  height: \"500\",\r\n  width: \"100%\",\r\n\r\n  playerVars: {\r\n    origin: \"localhost\",\r\n    iv_load_policy: 3 as 3,\r\n    autoplay: 1 as 1,\r\n    modestbranding: 1 as 1,\r\n    fs: 0 as 0\r\n  }\r\n};\r\n\r\n\r\n//used in the useEffect hook\r\nlet socket: SocketIOClient.Socket;\r\n\r\nconst MasterPage: React.FC<Props> = (props) => {\r\n\r\n  useEffect(() => {\r\n    socket = io(LOCALHOST);\r\n    console.log(socket)\r\n\r\n\r\n    //called On component unmount hook\r\n    return () => {\r\n      socket.emit(\"disconnect\");\r\n      // socket.off();\r\n    }\r\n  }, []);\r\n\r\n  const { songs, usernames, setToLivePlaylist, setToLiveUsernames } = props;\r\n  useEffect(() => {\r\n    socket.on(\"playlist_channel\", (data: any) => {\r\n      console.log(\"we got something!\");\r\n      console.log(JSON.parse(data));\r\n      setToLivePlaylist(jsonToPlaylist(JSON.parse(data)));\r\n    });\r\n  }, [songs, setToLivePlaylist]); //rerun this effect on rerenders only if props.songs has changed\r\n\r\n  useEffect(() => {\r\n    socket.on(\"usernames_channel\", (data: any) => {\r\n      console.log(\"we got userNAMES\");\r\n      console.log(data);\r\n      setToLiveUsernames(JSON.parse(data));\r\n    })\r\n  }, [usernames, setToLiveUsernames]);\r\n\r\n  // const [songResultsState, setSongResultsState] = useState<Song[]>([]);\r\n\r\n  // const onSearchSong = (text: string) => {\r\n  //   //use the async api call\r\n  //   searchSongs(text)\r\n  //     .then((result: Song[]) => {\r\n  //       console.log(\"just the results \", result);\r\n  //       setSongResultsState(result)\r\n  //       console.log(\"song results State\", songResultsState);\r\n  //     })\r\n  //     .catch(err => console.log(\"error loading songs from api \", err));\r\n  // }\r\n\r\n  // the songs played part ensures that the player gets refreshed at the end of a song\r\n  const renderPlayer = () => {\r\n    return (\r\n      <div id=\"music-player\" className=\"player-wrapper\">\r\n        {/* {this.state.currentSong.type === \"s\" && spotifyApi.getAccessToken() && (\r\n          <SpotifyPlayer\r\n            spotifyToken={spotifyApi.getAccessToken()}\r\n            songUri={this.state.currentSong.url}\r\n            songName={this.state.currentSong.name}\r\n            next={this._onEnd}\r\n          />\r\n        )} */}\r\n\r\n        {/* {this.state.currentSong.type === \"y\" && (\r\n          <YouTube\r\n            videoId={this.state.currentSong.url}\r\n            opts={youtubeOptions}\r\n            onEnd={this._onEnd}\r\n          />\r\n        )} */}\r\n\r\n        <YouTube\r\n          videoId={extractVideoId(props.songs[0].url)}\r\n          opts={youtubeOptions}\r\n          onReady={event => event.target.playVideo()}\r\n          onEnd={() => props.dequeueSong(props.pin)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //TODO will need to pass the results from the function called by NavBar\r\n  const searchResultsBlock = () => {\r\n    return (\r\n      <div className=\"col-md-12 col-xl-5\">\r\n        <SearchResultsContainer />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const songQueueBlock = () => {\r\n    return (\r\n      <div className=\"col-sm-12 col-lg-6 col-xl-3\">\r\n        <SongQueueContainer />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const userListBlock = () => {\r\n    return (\r\n      <div className=\"col-sm-12 col-lg-6 col-xl-3\">\r\n        <UserListPresenter\r\n          usernames={props.usernames} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const smallScreenLayout = () => {\r\n    return (\r\n      <>\r\n        {searchResultsBlock()}\r\n        {songQueueBlock()}\r\n        {userListBlock()}\r\n      </>\r\n    );\r\n  }\r\n  //same but search and Song Aueue columns are swapped\r\n  const normalScreenLayout = () => {\r\n    return (\r\n      <>\r\n        {songQueueBlock()}\r\n        {searchResultsBlock()}\r\n        {userListBlock()}\r\n      </>\r\n    );\r\n  }\r\n\r\n  const arangeComponents = () => {\r\n    // return this.smallScreenLayout();\r\n    return (\r\n      <div className=\"container-fluid row tables-container\">\r\n        {window.innerWidth < SMALL_SCREEN_WIDTH ? smallScreenLayout() : normalScreenLayout()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"main-container col-lg-12 col-xl-11\">\r\n      <NqmeNavBar />\r\n      <div className=\"content-container\">\r\n        {/* maybe I can put a gif or a cool picture on the display when there aren't any songs to play */}\r\n        {props.songs.length > 0 ? renderPlayer() : (<></>)}\r\n        {arangeComponents()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state: Store) => {\r\n  return {\r\n    pin: state.pin,\r\n    usernames: state.usernames,\r\n    songs: state.songs,\r\n    isLoading: state.apiCallsInProgress > 0\r\n  }\r\n}\r\n\r\n// it is a function that returns functions\r\nconst mapDispatchToProps = (dispatch: any, ownProps: any) => ({\r\n  dequeueSong: (pin: string) => dispatch(roomActions.dequeueSong(ownProps.client, pin)),\r\n  setToLivePlaylist: (songs: Song[]) => dispatch(roomActions.setToLivePlaylist(songs)),\r\n  setToLiveUsernames: (usernames: string[]) => dispatch(usernameActions.setToLiveUsernames(usernames))\r\n});\r\n\r\n\r\n\r\nexport default withApollo(connect(mapStateToProps, mapDispatchToProps)(MasterPage));\r\n","import { Song } from \"components/common/objectTypes/song\";\r\nimport { Store } from \"components/common/objectTypes/store\";\r\nimport React, { useEffect } from \"react\";\r\nimport { FlowerSpinner } from \"react-epic-spinners\";\r\nimport { connect } from \"react-redux\";\r\nimport \"../common/nqmeNavBar/nqmeNavBar\";\r\nimport NqmeNavBar from \"../common/nqmeNavBar/nqmeNavBar\";\r\nimport SearchResultsContainer from \"../common/searchResultsContainer/searchResultsContainer\";\r\nimport SongQueueContainer from \"../common/songQueueContainer/songQueueContainer\";\r\nimport UserListPresenter from \"../common/userListPresenter/userListPresenter\";\r\nimport \"./slavePage.scss\";\r\nimport jsonToPlaylist from \"components/common/utlilityFunctions/jsonToPlayList\";\r\nimport * as roomActions from \"../../redux/actions/roomActions\";\r\nimport * as usernameActions from \"../../redux/actions/usernameActions\";\r\nimport { LOCALHOST } from \"../../config.json\";\r\nimport io from \"socket.io-client\";\r\n\r\n\r\ninterface Props {\r\n  pin: string;\r\n  usernames: string[];\r\n  songs: Song[];\r\n  sessionName: string;\r\n  isLoading: boolean;\r\n  setToLivePlaylist: (songs: Song[]) => void;\r\n  setToLiveUsernames: (usernames: string[]) => void;\r\n};\r\n\r\n// const youtubeOptions = {\r\n//   height: \"500\",\r\n//   width: \"100%\",\r\n\r\n//   playerVars: {\r\n//     origin: \"localhost\"\r\n//   }\r\n// };\r\n\r\nconst SMALL_SCREEN_WIDTH = 1220;\r\n\r\nlet socket: SocketIOClient.Socket;\r\n\r\n// const SlavePage: React.FC<Props> = () => {\r\nconst SlavePage: React.FC<Props> = (props) => {\r\n\r\n  useEffect(() => {\r\n    socket = io(LOCALHOST);\r\n    console.log(socket)\r\n\r\n\r\n    //called On component unmount hook\r\n    return () => {\r\n      // socket.emit(\"disconnect\", { message: { pin: \"10\", username: \"us\" } });\r\n      socket.emit(\"disconnect\");\r\n      // socket.off();\r\n    }\r\n  }, []);\r\n\r\n  const { songs, usernames, setToLivePlaylist, setToLiveUsernames } = props;\r\n  useEffect(() => {\r\n    socket.on(\"playlist_channel\", (data: any) => {\r\n      console.log(\"we got something!\");\r\n      console.log(JSON.parse(data));\r\n      setToLivePlaylist(jsonToPlaylist(JSON.parse(data)));\r\n    });\r\n  }, [songs, setToLivePlaylist]); //rerun this effect on rerenders only if props.songs has changed\r\n\r\n  useEffect(() => {\r\n    socket.on(\"usernames_channel\", (data: any) => {\r\n      setToLiveUsernames(JSON.parse(data));\r\n    })\r\n  }, [usernames, setToLiveUsernames]);\r\n\r\n  // const [songResultsState, setSongResultsState] = useState<Song[]>([]);\r\n\r\n  // const onSearchSong = (text: string) => {\r\n  //   //use the async api call\r\n  //   searchSongs(text)\r\n  //     .then((result: Song[]) => setSongResultsState([...result]))\r\n  //     .catch(err => console.log(\"error loading songs from api \", err));\r\n  // }\r\n\r\n  // the songs played part ensures that the player gets refreshed at the end of a song\r\n  const renderPlayer = () => {\r\n    return (\r\n      <div></div>\r\n\r\n      // <div id=\"music-player\">\r\n      //   <YouTube\r\n      //     videoId=\"3kQXKJJ0nGc\"\r\n      //     opts={youtubeOptions}\r\n      //   />\r\n      // </div>\r\n    );\r\n  }\r\n\r\n  const searchResultsBlock = () => {\r\n    return (\r\n      <div className=\"col-md-12 col-xl-5\">\r\n        <SearchResultsContainer />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const songQueueBlock = () => {\r\n    return (\r\n      <div className=\"col-sm-12 col-lg-6 col-xl-3\">\r\n        <SongQueueContainer />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const userListBlock = () => {\r\n    return (\r\n      <div className=\"col-sm-12 col-lg-6 col-xl-3\">\r\n        <UserListPresenter usernames={props.usernames} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //search results take up all the width and the others -> half the screen\r\n  const smallScreenLayout = () => {\r\n    return (\r\n      <>\r\n        {searchResultsBlock()}\r\n        {songQueueBlock()}\r\n        {userListBlock()}\r\n      </>\r\n    );\r\n  }\r\n  //same but search and Song Aueue columns are swapped\r\n  const normalScreenLayout = () => {\r\n    return (\r\n      <>\r\n        {songQueueBlock()}\r\n        {searchResultsBlock()}\r\n        {userListBlock()}\r\n      </>\r\n    );\r\n  }\r\n\r\n  const arangeComponents = () => {\r\n    return (\r\n      <div className=\"container-fluid row tables-container\">\r\n        {window.innerWidth < SMALL_SCREEN_WIDTH ? smallScreenLayout() : normalScreenLayout()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return props.isLoading ? (<div>\r\n    <div className=\"darken-background\" />\r\n    <FlowerSpinner color=\"#d1c7d3\" size={220} className=\"center-flower\" />\r\n  </div>\r\n  ) : (\r\n      <div className=\"main-container col-lg-12 col-xl-11\">\r\n        <NqmeNavBar />\r\n        <div className=\"content-container\">\r\n          <div>{renderPlayer()}</div>\r\n          {arangeComponents()}\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: Store) => {\r\n  return {\r\n    pin: state.pin,\r\n    usernames: state.usernames,\r\n    songs: state.songs,\r\n    sessionName: state.sessionName,\r\n    isLoading: state.apiCallsInProgress > 0\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  setToLivePlaylist: roomActions.setToLivePlaylist,\r\n  setToLiveUsernames: usernameActions.setToLiveUsernames\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SlavePage);\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route, Switch } from \"react-router-dom\";\nimport \"./App.scss\";\nimport SpaceBackground from \"./components/common/background/spaceBackground\";\nimport Error from \"./components/common/errorPage/error\";\nimport LandingPage from \"./components/landingPage/landingPage\";\nimport MasterPage from \"./components/masterPage/masterPage\";\nimport SlavePage from \"./components/slavePage/slavePage\";\nimport { Store } from \"components/common/objectTypes/store\";\n\n\ninterface Props {\n  sessionName: string;\n}\n\nconst HOST: string = \"Host\"\n\nconst App: React.FC<Props> = (props) => {\n  return (\n    <>\n      <SpaceBackground />\n      <Switch>\n        <Route exact path=\"/\" component={LandingPage} />\n        <Route path=\"/room/:id\" component={() => props.sessionName === HOST ? <MasterPage /> : <SlavePage />} />\n        <Route component={Error} />\n      </Switch>\n    </>\n  );\n}\n\nconst mapStateToProps = (state: Store) => {\n  return {\n    sessionName: state.sessionName\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n\n","export default {\r\n  pin: null,\r\n  usernames: [],\r\n  songs: [],\r\n  sessionName: \"(=^-^=)\",\r\n  searchResults: [],\r\n  apiCallsInProgress: 0\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport pinReducer from \"./pinReducer\";\r\nimport sessionNameReducer from \"./sessionNameReducer\";\r\nimport usernameReducer from \"./usernameReducer\";\r\nimport songReducer from \"./songReducer\";\r\nimport apiStatusReducer from \"./apiStatusReducer\";\r\nimport searchResultsReducer from \"./searchResultsReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  pin: pinReducer,\r\n  usernames: usernameReducer,\r\n  songs: songReducer,\r\n  sessionName: sessionNameReducer,\r\n  searchResults: searchResultsReducer,\r\n  apiCallsInProgress: apiStatusReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import * as types from \"../actions/actionTypes\";\r\nimport { Room } from \"../../components/common/objectTypes/room\";\r\nimport initialState from \"./initialState\";\r\n\r\ntype Actions = { type: string; room: Room };\r\n\r\nexport default function pinReducer(\r\n  pinState = initialState.pin,\r\n  action: Actions\r\n) {\r\n  switch (action.type) {\r\n    case types.LOAD_ROOM_SUCCESS:\r\n      return action.room.pin;\r\n    default:\r\n      return pinState;\r\n  }\r\n}\r\n","import * as types from \"../actions/actionTypes\";\r\nimport { Room } from \"../../components/common/objectTypes/room\";\r\nimport initialState from \"./initialState\";\r\n\r\ntype Actions =\r\n  | { type: \"LOAD_ROOM_SUCCESS\"; room: Room }\r\n  | { type: \"LOAD_USERNAMES_SUCCESS\"; usernames: string[] }\r\n  | { type: \"SET_TO_LIVE_USERNAMES\"; usernames: string[] };\r\n\r\nexport default function usernameReducer(\r\n  usernamesState = initialState.usernames,\r\n  action: Actions\r\n) {\r\n  switch (action.type) {\r\n    case types.LOAD_ROOM_SUCCESS:\r\n      return action.room.usernames;\r\n    case types.LOAD_USERNAMES_SUCCESS:\r\n      return action.usernames;\r\n    case types.SET_TO_LIVE_USERNAMES:\r\n      return action.usernames;\r\n    default:\r\n      return usernamesState;\r\n  }\r\n}\r\n","import * as types from \"../actions/actionTypes\";\r\nimport { Room } from \"../../components/common/objectTypes/room\";\r\nimport initialState from \"./initialState\";\r\nimport { Song } from \"components/common/objectTypes/song\";\r\n\r\ntype Actions =\r\n  | { type: \"LOAD_ROOM_SUCCESS\"; room: Room }\r\n  | { type: \"ADD_SONG_OPTIMISTIC\"; song: Song }\r\n  | { type: \"LIKE_SONG_OPTIMISTIC\"; title: string }\r\n  | { type: \"DEQUEUE_SONG_OPTIMISTIC\" }\r\n  | { type: \"SET_TO_LIVE_PLAYLIST\"; songs: Song[] };\r\n\r\nexport default function songReducer(\r\n  songsState: Song[] = initialState.songs,\r\n  action: Actions\r\n) {\r\n  switch (action.type) {\r\n    case types.LOAD_ROOM_SUCCESS:\r\n      return action.room.songs;\r\n    case types.ADD_SONG_OPTIMISTIC:\r\n      return [...songsState, action.song];\r\n    case types.LIKE_SONG_OPTIMISTIC:\r\n      //sort playlist in descending like order\r\n      return songsState\r\n        .map(song => {\r\n          //note very cool -> using the spread operator I can update ONLY the likes propery!\r\n          return song.title === action.title\r\n            ? { ...song, likes: song.likes + 1 }\r\n            : song;\r\n        })\r\n        .sort((songA, songB) => songB.likes - songA.likes);\r\n    case types.DEQUEUE_SONG_OPTIMISTIC:\r\n      return songsState.slice(1);\r\n    case types.SET_TO_LIVE_PLAYLIST:\r\n      return action.songs;\r\n    default:\r\n      return songsState;\r\n  }\r\n}\r\n","import * as types from \"../actions/actionTypes\";\r\nimport initialState from \"./initialState\";\r\n\r\ntype Actions = { type: string; sessionName: string };\r\n\r\nexport default function sessionNameReducer(\r\n  sessionNameState = initialState.sessionName,\r\n  action: Actions\r\n) {\r\n  switch (action.type) {\r\n    case types.SET_SESSION_NAME:\r\n      return action.sessionName;\r\n    default:\r\n      return sessionNameState;\r\n  }\r\n}\r\n","import { Song } from \"components/common/objectTypes/song\";\r\nimport * as types from \"../actions/actionTypes\";\r\nimport initialState from \"./initialState\";\r\n\r\ntype Actions = { type: string; songs: Song[] };\r\n\r\nexport default function searchResultsReducer(\r\n  searchResultsState = initialState.searchResults,\r\n  action: Actions\r\n) {\r\n  switch (action.type) {\r\n    case types.SEARCH_SONGS_SUCCESS:\r\n      return action.songs;\r\n    case types.CLEAR_SEARCH_RESULTS:\r\n      return [];\r\n    default:\r\n      return searchResultsState;\r\n  }\r\n}\r\n","import * as types from \"../actions/actionTypes\";\r\nimport initialState from \"./initialState\";\r\n\r\ntype Actions = { type: string; object: any };\r\n\r\nexport default function apiStatusReducer(\r\n  state = initialState.apiCallsInProgress,\r\n  action: Actions\r\n) {\r\n  if (action.type === types.BEGIN_API_CALL) {\r\n    return state + 1;\r\n  } else if (\r\n    action.type === types.API_CALL_ERROR ||\r\n    actionTypeEndsInSuccess(action.type)\r\n  ) {\r\n    return state - 1;\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nfunction actionTypeEndsInSuccess(type: string) {\r\n  return type.substring(type.length - 8) === \"_SUCCESS\";\r\n}\r\n","import { ApolloProvider } from '@apollo/react-hooks';\nimport { InMemoryCache, NormalizedCacheObject } from 'apollo-cache-inmemory';\nimport { ApolloClient } from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.css\";\nimport App from \"./App\";\nimport \"./index.scss\";\nimport configureStore from \"./redux/configureStore\";\nimport { LOCALHOST_GRAPHQL } from \"config.json\"\n\n\n\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n    uri: LOCALHOST_GRAPHQL\n});\n\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n    cache,\n    link\n});\n\n// searchSongs(\"two feet\");\n\n// ... above is the instantiation of the client object.\n// client\n//     .query({\n//         query: gql`\n//     query {\n//         room(pin:\"1111\") {\n//             pin\n//             usernames\n//             songs {\n//                 title\n//                 url\n//                 likes\n//                 company\n//             }\n//         }\n//     }\n//     `\n//     })\n//     .then(result => console.log(result));\n\n\nconst store = configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <ApolloProvider client={client}>\n            <BrowserRouter>\n                <App />\n            </BrowserRouter>\n        </ApolloProvider>\n    </Provider>, document.getElementById(\"root\"));","import { applyMiddleware, createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n//warns us if we mutate state in the redux store\r\nimport reduxImmutableStateInvariant from \"redux-immutable-state-invariant\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers/index\";\r\n\r\nexport default function configureStore(initialState?: any) {\r\n  return createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(thunk, reduxImmutableStateInvariant()))\r\n  );\r\n}\r\n"],"sourceRoot":""}